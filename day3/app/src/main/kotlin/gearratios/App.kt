/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package gearratios

import java.io.File

fun readFile(fileName: String): List<String> {
    val currentDir = System.getProperty("user.dir")
    val file: File = File("$currentDir/src/main/resources/$fileName")
    return file.bufferedReader().readLines()
}

fun checkSymbols(range: IntRange, 
                 lines: List<String>, 
                 lastIndex: Int): Boolean {
    val length: IntRange = IntRange(0, lines.lastIndex)
    val regex: Regex = Regex("[^.\\d]")
    val start: Int = range.start
    val end: Int = range.endInclusive
    for (i in length) {
        if (start > 0 && end < lastIndex) {
            if (regex.matches(lines.get(i).elementAt(start - 1).toString())) {
                return true
            }
            if (regex.matches(lines.get(i).elementAt(end + 1).toString())) {
                return true
            }
            if (i == 0) {
                continue
            }
        } else if (start == 0) {
            if (regex.matches(lines.get(i).elementAt(end + 1).toString())) {
                return true
            }
        } else {
            if (regex.matches(lines.get(i).elementAt(start - 1).toString())) {
                return true
            }
        }
        for (j in range) {
            if (regex.matches(lines.get(i).elementAt(j).toString())) {
                return true
            }
        }
    }
    return false
}

fun numbersInTheEngineSchematic(lines: List<String>): Int {
    val regex: Regex = Regex("\\b\\d+\\b")
    val last: Int = lines.lastIndex
    val lastInLines: Int = lines.elementAt(0).lastIndex
    var sum: Int = 0
    lines.forEachIndexed { i, value ->
        val matches = regex.findAll(value)
        var list: MutableList<String> = mutableListOf<String>()
        list.add(value)
        if (i > 0 && i < last) {
            list.add(lines.elementAt(i + 1))
            list.add(lines.elementAt(i - 1))
        } else if (i == 0) {
            list.add(lines.elementAt(i + 1))
        } else {
            list.add(lines.elementAt(i - 1))
        }
        for (match in matches) {
            if (checkSymbols(match.range, list, lastInLines)) {
                sum += (match.value).toInt()
            }
        }

    }
    return sum
}


fun main() {
    val sum: Int = numbersInTheEngineSchematic(readFile("input.txt"))
    println(sum)
}